#!/usr/bin/env bash

#COMP2137 Linux Automation System Report Script

#Enable strict error handling for safety
set -euo pipefail

#To check if a command exists
have(){ command -v "$1" >/dev/null 2>&1; }

#Headers
HOSTNAME="$(hostname)"
USERNAME="${SUDO_USER:-$(whoami)}"
NOW="$(date '+%Y-%m-%d %H:%M:%S %Z')"

#OS (source /etc/os-release)
OS_NAME="Unknown"
if [ -r /etc/os-release ]; then
  # shellcheck disable=SC1091
  . /etc/os-release
  OS_NAME="${NAME:-Linux} ${VERSION:-}"
fi

#Uptime
UPTIME_STR="$(uptime -p 2>/dev/null | sed 's/^up //')"
[ -z "$UPTIME_STR" ] && UPTIME_STR="$(uptime 2>/dev/null | awk -F'up ' '{print $2}' | awk -F',' '{print $1","$2}')"

#CPU
CPU="Unknown"
if have lshw; then
  CPU="$(sudo -n lshw -C cpu 2>/dev/null | awk -F': ' '/product:/{print $2}' | head -1)"
fi
[ -z "$CPU" ] && CPU="$(awk -F': ' '/model name/{print $2; exit}' /proc/cpuinfo 2>/dev/null)"

#RAM
RAM="$(free -h 2>/dev/null | awk '/^Mem:/ {print $2}')"

#Disks (make/model/size
DISKS="(none detected)"
if have lshw; then
  d="$(sudo -n lshw -C disk 2>/dev/null |
      awk -F': ' '
        $1 ~ /vendor/ {v=$2}
        $1 ~ /product/ {m=$2}
        $1 ~ /size/    {s=$2; printf("- %s %s (%s)\n", v, m, s); v=m=s=""}
      ')"
  [ -n "$d" ] && DISKS="$d"
fi

#Video Adapters
VIDEO="Unknown"
if have lshw; then
  v="$(sudo -n lshw -C display 2>/dev/null | awk -F': ' '/product:/{print $2}' | paste -sd ' | ' -)"
  [ -n "$v" ] && VIDEO="$v"
fi

#Default route / host IP / gateway using ip r + ip a (gather | filter)
DEFIF="$(ip r 2>/dev/null | awk '/^default/ {print $5; exit}')"
GATEWAY_IP="$(ip r 2>/dev/null | awk '/^default/ {print $3; exit}')"
HOST_ADDR=""
[ -n "${DEFIF:-}" ] && HOST_ADDR="$(ip -4 a show dev "$DEFIF" 2>/dev/null | awk '/inet /{print $2}' | cut -d/ -f1)"
[ -z "$HOST_ADDR" ] && HOST_ADDR="Unknown"
[ -z "$GATEWAY_IP" ] && GATEWAY_IP="Unknown"

#DNS servers (systemd-resolved first, else resolv.conf)
DNS_FILE="/run/systemd/resolve/resolv.conf"
[ -r "$DNS_FILE" ] || DNS_FILE="/etc/resolv.conf"
DNS_SERVERS="$(awk '/^nameserver/ {print $2}' "$DNS_FILE" 2>/dev/null | paste -sd ', ' -)"
[ -z "$DNS_SERVERS" ] && DNS_SERVERS="Unknown"

#System Status
#Logged-in users
USERS="$(who 2>/dev/null | awk '{print $1}' | sort -u | paste -sd ', ' -)"
[ -z "$USERS" ] && USERS="none"

#Disk space (df; exclude tmpfs/devtmpfs/squashfs; labeled)
DISK_SPACE="$(df -h -t ext2 -t ext3 -t ext4 -t xfs -t btrfs -t zfs \
  --output=target,avail 2>/dev/null | awk 'NR>1{printf "/%s %s\n", ($1=="/"?"":substr($1,2)),$2}')"
[ -z "$DISK_SPACE" ] && DISK_SPACE="(no local filesystems found)"
#Process count (ps | wc -l)
PROC_COUNT="$(ps -e --no-headers 2>/dev/null | wc -l | awk '{print $1}')"

#Load Averages
LOAD_AVG="$(awk '{print $1", "$2", "$3}' /proc/loadavg 2>/dev/null)"

#Listening Ports (ss | awk | sort -u | paste -sd ', ')
LISTEN_PORTS="$(ss -tuln 2>/dev/null \
  | awk 'NR>1{n=$5; gsub(/\[|\]/,"",n); split(n,a,":"); p=a[length(a)]; if(p~/^[0-9]+$/) print p; }' \
  | sort -n -u | paste -sd ', ' -)"
[ -z "$LISTEN_PORTS" ] && LISTEN_PORTS="none"

#UFW status (requires sudo for consistency on some systems)
if have ufw; then
  UFW_STATUS="$(sudo -n ufw status 2>/dev/null | sed -n '1p')"
else
  UFW_STATUS="ufw not installed"
fi
[ -z "$UFW_STATUS" ] && UFW_STATUS="(requires sudo or ufw disabled)"

#Output 
echo
cat <<REPORT
System Report for $HOSTNAME generated by $USERNAME, on $NOW

System Information
------------------
OS: $OS_NAME
Uptime: $UPTIME_STR
CPU: $CPU
RAM: $RAM
Disk(s):
$DISKS
Video: $VIDEO
Host Address: $HOST_ADDR
Gateway IP: $GATEWAY_IP
DNS Server: $DNS_SERVERS

System Status
-------------
Users Logged In: $USERS
Disk Space:
$DISK_SPACE
Process Count: $PROC_COUNT
Load Averages: $LOAD_AVG
Listening Network Ports: $LISTEN_PORTS
UFW Status: $UFW_STATUS
REPORT
echo
